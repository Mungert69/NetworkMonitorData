// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NetworkMonitor.Data;

#nullable disable

namespace NetworkMonitorData.Migrations
{
    [DbContext(typeof(MonitorContext))]
    [Migration("20240408155604_LLMSessionLogs")]
    partial class LLMSessionLogs
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("NetworkMonitor.Objects.Blog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Hash")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Header")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("ImageTitle")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("IsFeatured")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsImage")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsMainFeatured")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsOnBlogSite")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsPublished")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsVideo")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Markdown")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("VideoTitle")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("VideoUrl")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Blogs", (string)null);
                });

            modelBuilder.Entity("NetworkMonitor.Objects.BlogCategory", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("BlogID")
                        .HasColumnType("int");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("ID");

                    b.HasIndex("BlogID");

                    b.ToTable("BlogCategories", (string)null);
                });

            modelBuilder.Entity("NetworkMonitor.Objects.BlogPicture", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("BlogId")
                        .HasColumnType("int");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsUsed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("BlogPictures", (string)null);
                });

            modelBuilder.Entity("NetworkMonitor.Objects.EmailInfo", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("DateOpened")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("DateSent")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("EmailType")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("IsOpen")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("ID");

                    b.ToTable("EmailInfos", (string)null);
                });

            modelBuilder.Entity("NetworkMonitor.Objects.Entity.LLMSessionLog", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("DateAdded")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("SessionId")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("ID");

                    b.ToTable("LLMSessionLogs", (string)null);
                });

            modelBuilder.Entity("NetworkMonitor.Objects.Entity.LLMSessionOutput", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("DateAdded")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("LLMSessionLogId")
                        .HasColumnType("int");

                    b.Property<string>("Output")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("ID");

                    b.HasIndex("LLMSessionLogId");

                    b.ToTable("LLMSessionOutputs", (string)null);
                });

            modelBuilder.Entity("NetworkMonitor.Objects.Entity.LogChatGPTObj", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("DateAdded")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("JsonData")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("JsonSentData")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Prompt")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("Success")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("ID");

                    b.ToTable("ChatGPTLogs", (string)null);
                });

            modelBuilder.Entity("NetworkMonitor.Objects.LoadServer", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("RabbitHostName")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("RabbitInstanceName")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("RabbitPort")
                        .HasColumnType("int");

                    b.Property<string>("Url")
                        .HasMaxLength(512)
                        .HasColumnType("varchar(512)");

                    b.Property<string>("UserID")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("ID");

                    b.ToTable("LoadServers", (string)null);
                });

            modelBuilder.Entity("NetworkMonitor.Objects.MonitorIP", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("AddUserEmail")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Address")
                        .HasMaxLength(512)
                        .HasColumnType("varchar(512)");

                    b.Property<string>("AppID")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("DateAdded")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("EditAuthKey")
                        .HasMaxLength(512)
                        .HasColumnType("varchar(512)");

                    b.Property<bool>("Enabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("EndPointType")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("Hidden")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsEmailVerified")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Password")
                        .HasColumnType("longtext");

                    b.Property<ushort>("Port")
                        .HasColumnType("smallint unsigned");

                    b.Property<int>("Timeout")
                        .HasColumnType("int");

                    b.Property<string>("UserID")
                        .HasColumnType("longtext");

                    b.Property<string>("UserInfoUserID")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Username")
                        .HasMaxLength(512)
                        .HasColumnType("varchar(512)");

                    b.HasKey("ID");

                    b.HasIndex("UserInfoUserID");

                    b.ToTable("MonitorIPs", (string)null);
                });

            modelBuilder.Entity("NetworkMonitor.Objects.MonitorPingInfo", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("AddUserEmail")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("varchar(512)");

                    b.Property<string>("AppID")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("DataSetID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DateEnded")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("DateStarted")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Enabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("EndPointType")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)");

                    b.Property<bool>("IsArchived")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsEmailVerified")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("MonitorIPID")
                        .HasColumnType("int");

                    b.Property<int>("PacketsLost")
                        .HasColumnType("int");

                    b.Property<float>("PacketsLostPercentage")
                        .HasColumnType("float");

                    b.Property<int>("PacketsRecieved")
                        .HasColumnType("int");

                    b.Property<int>("PacketsSent")
                        .HasColumnType("int");

                    b.Property<string>("Password")
                        .HasMaxLength(512)
                        .HasColumnType("varchar(512)");

                    b.Property<ushort>("Port")
                        .HasColumnType("smallint unsigned");

                    b.Property<float>("RoundTripTimeAverage")
                        .HasColumnType("float");

                    b.Property<int>("RoundTripTimeMaximum")
                        .HasColumnType("int");

                    b.Property<int>("RoundTripTimeMinimum")
                        .HasColumnType("int");

                    b.Property<int>("RoundTripTimeTotal")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<int>("Timeout")
                        .HasColumnType("int");

                    b.Property<string>("UserID")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Username")
                        .HasMaxLength(512)
                        .HasColumnType("varchar(512)");

                    b.HasKey("ID");

                    b.HasIndex(new[] { "MonitorIPID", "DataSetID" }, "IDX_MonitorIPID_DataSetID");

                    b.ToTable("MonitorPingInfos", (string)null);
                });

            modelBuilder.Entity("NetworkMonitor.Objects.PingInfo", b =>
                {
                    b.Property<ulong>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint unsigned");

                    b.Property<uint>("DateSentInt")
                        .HasColumnType("int unsigned");

                    b.Property<int>("MonitorPingInfoID")
                        .HasColumnType("int");

                    b.Property<ushort?>("RoundTripTime")
                        .HasColumnType("smallint unsigned");

                    b.Property<ushort>("StatusID")
                        .HasColumnType("smallint unsigned");

                    b.HasKey("ID");

                    b.HasIndex("MonitorPingInfoID");

                    b.ToTable("PingInfos", (string)null);
                });

            modelBuilder.Entity("NetworkMonitor.Objects.PredictStatus", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool>("AlertFlag")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("AlertSent")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("DownCountDb")
                        .HasColumnType("int")
                        .HasColumnName("DownCount");

                    b.Property<DateTime?>("EventTime")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsUpDb")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("IsUp");

                    b.Property<string>("Message")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<int>("MonitorPingInfoID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("MonitorPingInfoID")
                        .IsUnique();

                    b.ToTable("PredictStatuses", (string)null);
                });

            modelBuilder.Entity("NetworkMonitor.Objects.ProcessorObj", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("AppID")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("AuthKey")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("DisabledEndPointTypesJson")
                        .IsRequired()
                        .HasColumnType("json");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsPrivate")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("Load")
                        .HasColumnType("int");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("MaxLoad")
                        .HasColumnType("int");

                    b.Property<string>("Owner")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("ScheduleStr")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("ID");

                    b.ToTable("ProcessorObjs", (string)null);
                });

            modelBuilder.Entity("NetworkMonitor.Objects.StatusItem", b =>
                {
                    b.Property<ushort>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint unsigned");

                    b.Property<string>("Status")
                        .HasColumnType("longtext");

                    b.HasKey("ID");

                    b.ToTable("StatusList", (string)null);
                });

            modelBuilder.Entity("NetworkMonitor.Objects.StatusObj", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool>("AlertFlag")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("AlertSent")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("DownCount")
                        .HasColumnType("int");

                    b.Property<DateTime?>("EventTime")
                        .HasColumnType("datetime(6)");

                    b.Property<bool?>("IsUp")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Message")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<int>("MonitorPingInfoID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("MonitorPingInfoID")
                        .IsUnique();

                    b.ToTable("StatusObjs", (string)null);
                });

            modelBuilder.Entity("NetworkMonitor.Objects.TestUser", b =>
                {
                    b.Property<string>("Email")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime?>("ActivatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("CancelAt")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Enabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("InviteSentDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("UserID")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Email");

                    b.ToTable("TestUsers", (string)null);
                });

            modelBuilder.Entity("NetworkMonitor.Objects.UserAuthInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClientAppName")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("FusionAppID")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("IsAuthenticated")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsSha3Hash")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("ResfreshToken")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("UserID")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("UserAuthInfos", (string)null);
                });

            modelBuilder.Entity("NetworkMonitor.Objects.UserInfo", b =>
                {
                    b.Property<string>("UserID")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("AccountType")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("CancelAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CustomerId")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("DisableEmail")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Email")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<bool>("Email_verified")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("Enabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Family_name")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Given_name")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("HostLimit")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastLoginDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("MonitorAlertEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Nickname")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Picture")
                        .HasMaxLength(512)
                        .HasColumnType("varchar(512)");

                    b.Property<bool>("PredictAlertEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Status")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Sub")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("Updated_at")
                        .HasColumnType("datetime(6)");

                    b.HasKey("UserID");

                    b.ToTable("UserInfos", (string)null);
                });

            modelBuilder.Entity("NetworkMonitor.Objects.BlogCategory", b =>
                {
                    b.HasOne("NetworkMonitor.Objects.Blog", null)
                        .WithMany("BlogCategories")
                        .HasForeignKey("BlogID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("NetworkMonitor.Objects.Entity.LLMSessionOutput", b =>
                {
                    b.HasOne("NetworkMonitor.Objects.Entity.LLMSessionLog", "LLMSessionLog")
                        .WithMany("LLMSessionOutputs")
                        .HasForeignKey("LLMSessionLogId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LLMSessionLog");
                });

            modelBuilder.Entity("NetworkMonitor.Objects.MonitorIP", b =>
                {
                    b.HasOne("NetworkMonitor.Objects.UserInfo", "UserInfo")
                        .WithMany("MonitorIPs")
                        .HasForeignKey("UserInfoUserID");

                    b.Navigation("UserInfo");
                });

            modelBuilder.Entity("NetworkMonitor.Objects.PingInfo", b =>
                {
                    b.HasOne("NetworkMonitor.Objects.MonitorPingInfo", null)
                        .WithMany("PingInfos")
                        .HasForeignKey("MonitorPingInfoID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("NetworkMonitor.Objects.PredictStatus", b =>
                {
                    b.HasOne("NetworkMonitor.Objects.MonitorPingInfo", null)
                        .WithOne("PredictStatus")
                        .HasForeignKey("NetworkMonitor.Objects.PredictStatus", "MonitorPingInfoID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("NetworkMonitor.Objects.DetectionResult", "ChangeDetectionResult", b1 =>
                        {
                            b1.Property<int>("PredictStatusID")
                                .HasColumnType("int");

                            b1.Property<double>("AverageScore")
                                .HasColumnType("double");

                            b1.Property<int>("IndexOfFirstDetection")
                                .HasColumnType("int");

                            b1.Property<bool>("IsDataLimited")
                                .HasColumnType("tinyint(1)");

                            b1.Property<bool>("IsIssueDetected")
                                .HasColumnType("tinyint(1)");

                            b1.Property<double>("MaxMartingaleValue")
                                .HasColumnType("double");

                            b1.Property<double>("MinPValue")
                                .HasColumnType("double");

                            b1.Property<int>("NumberOfDetections")
                                .HasColumnType("int");

                            b1.HasKey("PredictStatusID");

                            b1.ToTable("PredictStatuses");

                            b1.WithOwner()
                                .HasForeignKey("PredictStatusID");
                        });

                    b.OwnsOne("NetworkMonitor.Objects.DetectionResult", "SpikeDetectionResult", b1 =>
                        {
                            b1.Property<int>("PredictStatusID")
                                .HasColumnType("int");

                            b1.Property<double>("AverageScore")
                                .HasColumnType("double");

                            b1.Property<int>("IndexOfFirstDetection")
                                .HasColumnType("int");

                            b1.Property<bool>("IsDataLimited")
                                .HasColumnType("tinyint(1)");

                            b1.Property<bool>("IsIssueDetected")
                                .HasColumnType("tinyint(1)");

                            b1.Property<double>("MaxMartingaleValue")
                                .HasColumnType("double");

                            b1.Property<double>("MinPValue")
                                .HasColumnType("double");

                            b1.Property<int>("NumberOfDetections")
                                .HasColumnType("int");

                            b1.HasKey("PredictStatusID");

                            b1.ToTable("PredictStatuses");

                            b1.WithOwner()
                                .HasForeignKey("PredictStatusID");
                        });

                    b.Navigation("ChangeDetectionResult")
                        .IsRequired();

                    b.Navigation("SpikeDetectionResult")
                        .IsRequired();
                });

            modelBuilder.Entity("NetworkMonitor.Objects.StatusObj", b =>
                {
                    b.HasOne("NetworkMonitor.Objects.MonitorPingInfo", null)
                        .WithOne("MonitorStatus")
                        .HasForeignKey("NetworkMonitor.Objects.StatusObj", "MonitorPingInfoID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("NetworkMonitor.Objects.Blog", b =>
                {
                    b.Navigation("BlogCategories");
                });

            modelBuilder.Entity("NetworkMonitor.Objects.Entity.LLMSessionLog", b =>
                {
                    b.Navigation("LLMSessionOutputs");
                });

            modelBuilder.Entity("NetworkMonitor.Objects.MonitorPingInfo", b =>
                {
                    b.Navigation("MonitorStatus")
                        .IsRequired();

                    b.Navigation("PingInfos");

                    b.Navigation("PredictStatus");
                });

            modelBuilder.Entity("NetworkMonitor.Objects.UserInfo", b =>
                {
                    b.Navigation("MonitorIPs");
                });
#pragma warning restore 612, 618
        }
    }
}
